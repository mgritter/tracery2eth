# -*- Mode: python -*-

env = Environment()
#env['SOLCLIBDIR'] = Dir( "#/lib" ).abspath

solcBuilder = Builder( action = "solc --optimize --combined-json abi,bin,interface $SOURCE > $TARGET",
                       suffix = ".json",
                       src_suffix = ".sol" )

# Create a JS file suitable for importing into geth shell.
def wrapJson( target, source, env ):
    assert len( target ) == 1
    assert len( source ) == 1
    contractName = env['CONTRACT']
    
    with open( str(source[0]), "r" ) as fileIn:
        with open( str(target[0]), "w" ) as fileOut:
            fileOut.write( "var compilerOutput=" )
            fileOut.write( fileIn.read().rstrip() )
            fileOut.write( ";\n" )
            fileOut.write( "var contractName='src/" + contractName + "';\n" )
            # FIXME: move to another file
            fileOut.write( """
function showTxnResponse( e, contract ) {
    if ( typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
}

function createContract() {
    var cAbi = JSON.parse( compilerOutput.contracts[contractName].abi );
    var cBin = "0x" + compilerOutput.contracts[contractName].bin;
    var cx = eth.contract( cAbi );
    return cx.new( { from:eth.accounts[0],
                     data:cBin,
                     gas:4700000 },
                     showTxnResponse );
}

function getContract( at ) {
    var cAbi = JSON.parse( compilerOutput.contracts[contractName].abi );
    return eth.contract( cAbi ).at( at );
}

function showEvents( x ) {
    var firstBlock = 0;
    if ( x.transactionHash != null ) {
      firstBlock = eth.getTransaction( x.transactionHash ).blockNumber;
   }
    x.allEvents( {fromBlock:firstBlock, toBlock:'latest' } ).get(
       function ( error, response ) {
          if ( error == null ) {
             for ( var i = 0; i < response.length; ++i ) {
               console.log( response[i].event, 
                            JSON.stringify( response[i].args ) );
             }
          }
       }
    )
    return;
}
""" )

jsonWrapper = Builder( action = wrapJson,
                       suffix = ".js",
                       src_suffix = ".json" )

env.Append( BUILDERS={ 'EthContract' : solcBuilder } )
env.Append( BUILDERS={ 'EthJs' : jsonWrapper } )

env.EthContract( 'animal' )
env.Default( env.EthJs( 'animal', CONTRACT="animal.sol:animal" ) )
